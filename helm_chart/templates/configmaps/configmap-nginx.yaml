apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configMaps.nginx.name }}
  labels:
    app: {{ .Values.metadata.labels.app }}
    environment: {{ .Values.metadata.environment }}
data:
  nginx.conf: |
    user nginx;
    worker_processes {{ .Values.nginx.workerProcesses | default "auto" }};

    events {
      worker_connections {{ .Values.nginx.workerConnections | default 1024 }};
    }

    http {
      upstream external_backend {
        {{- if .Values.nginx.loadBalancingAlgorithm }}
        {{ .Values.nginx.loadBalancingAlgorithm }};
        {{- else }}
        least_conn;
        {{- end }}

        {{- range .Values.nginx.externalServers }}
        server {{ . }};
        {{- end }}
      }

      server {
        listen {{ .Values.nginx.listenPort | default 80 }};

        location / {
          proxy_pass http://external_backend;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }

        location {{ .Values.livenessProbe.nginx.path }} {
          access_log off;
          return 200 'OK';
          add_header Content-Type text/plain;
        }
      }

      server {
        listen {{ .Values.nginx.statusPort | default 8080 }};
        location /nginx_status {
          stub_status;
          {{- if .Values.nginx.statusAccess.allow }}
          allow {{ .Values.nginx.statusAccess.allow }};
          {{- end }}
          deny all;
        }
      }
    }
